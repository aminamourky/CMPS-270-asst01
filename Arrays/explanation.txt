1. symbolic constant SIZE can be defined by using the following syntax

#define SIZE 10

2. for printArray(), you just have to iterate through the array once and print the element along with it's index.

/ function printArray to print the array

voidprintArray(int arr[]){

printf("Index\tValue\n");

for(int i=0; i<SIZE; i++){

printf(" %d\t %d\n", i, arr[i]);

}

}

3. for calculating the frequency of each element in array, we need to maintain a frequency array and increment the value of corresponding index by 1 each time it is present in the array.


voidarrayHistogram(int arr[]){

int freq[3]={0};//frequency array



for(int i=0; i<SIZE; i++){

freq[arr[i]-1]++;

}



printf("Value\tFrequency\tHistogram\n");

for(int i=0; i<3; i++){

printf("%d\t%d\t\t", i+1, freq[i]);

for(int j=0; j<freq[i]; j++){

printf("*");

}

printf("\n");

}

}

4. for swapValues(), we need to maintain a temp variable to store a value of one variable while we swap the two elements.


voidswapValues(int arr[],int index1,int index2){

int temp = arr[index1];

arr[index1]= arr[index2];

arr[index2]= temp;

}

5. bubbleSort() requires you to traverse the array until there is no pair such that for i < j, arr[ i ] > arr[ j ], this can be done by iterating through array and if such pair is observed, swap the elements at these indexes.


voidbubbleSort(int arr[]){

for(int i=0; i<SIZE-1; i++){

for(int j=0; j<SIZE-1; j++){

if(arr[j]>= arr[j+1])

swapValues(arr, j, j+1);

}

}

}
6. as you might know, for an array for even length, median is calculated by average of elements in the middle, while for odd sized array, there is only 1 median and the return type is kept float because the average of two numbers can be a fraction.


floatmedian(int arr[]){

if(SIZE%2==0)

return(arr[SIZE/2-1]+ arr[SIZE/2])/2;

else

return arr[(SIZE-1)/2];

}

7. for mode, we can simply use the frequency array and return the element with maximum frequency.


intmode(int arr[]){

int freq[3]={0};

for(int i=0; i<SIZE; i++){

freq[arr[i]-1]++;

}



int mx =0;

for(int i=0; i<3; i++){

mx =(mx > freq[i])? mx:freq[i];

}



return mx;

}

8. for checking if array is sorted or not, we just have to iterate through the array once and check if every element next to the current element is greater than or equal to it or not. If not, then we will simply return false. If all the pairs are correct, then we can return true.


intisSorted(int arr[],int n){

int ans =1;

for(int i=0; i<n-1; i++){

if(arr[i]> arr[i+1])

ans =0;

}



return ans;

}